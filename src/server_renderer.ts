/*
 * This file is originally developed as part of @adonisjs/inertia
 * (c) AdonisJS
 *
 * This file has been modified by Mahendra Chavda
 * to work with express-inertia
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

import { pathToFileURL } from "node:url";
import type {
  PageObject,
  RenderInertiaSsrApp,
  ResolvedConfig,
} from "./types.js";
import type { ViteDevServer } from "vite";

/**
 * Responsible for rendering page on the server
 *
 * - In development, we use the Vite Runtime API
 * - In production, we just import and use the SSR
 *  bundle generated by Vite
 */
export class ServerRenderer {
  constructor(
    protected config: ResolvedConfig,
    protected vite?: ViteDevServer
  ) {}

  /**
   * Render the page on the server
   *
   * On development, we use the Vite Runtime API
   * On production, we just import and use the SSR bundle generated by Vite
   */
  async render(pageObject: PageObject) {
    let render: { default: RenderInertiaSsrApp };

    /**
     * Use the Vite Runtime API to execute the entrypoint
     * if we are in development mode
     */

    const isProduction = process.env.NODE_ENV === "production";

    if (!isProduction && this.vite) {
      const mod = await this.vite.ssrLoadModule(this.config.ssrEntrypoint!);
      render = { default: mod.default ?? mod };
    } else {
      /**
       * Otherwise, just import the SSR bundle
       */
      render = await import(
        pathToFileURL(this.config.ssrBuildEntrypoint!).href
      );
    }

    /**
     * Call the render function and return head and body
     */
    const result = await render.default(pageObject);
    return { head: result.head, body: result.body };
  }
}
